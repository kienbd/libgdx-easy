== IKVM ==
The libs/ folder contains precompiled assemblies and executables for mono. These can be build
by following the instructions at https://github.com/samskivert/ikvm-monotouch. The one's in
SVN should be good enough for now.

== How to develop for the backend ==
After checking out the libgdx source, execute ant in gdx-backends-iosmonotouch/. This will 
generate libs/gdx.dll and libs/gdx-backend-ios.dll necessary for the MonoTouch project in mono/.

The development cycle should look like this from now on:

1) Open Eclipse and import the gdx, gdx-jnigen and gdx-backends-iosmonotouch projects.
2) Open MonoDevelop and open the solution in the gdx-backens-iosmonotouch/mono folder.
3) Change your code in Eclipse
4) Build and run in MonoDevelop. The mono project has a custom build step that invokes ant to build
the backend and create an assembly.
   
The current MonoTouch project is just there for testing purposes. Eventually we'll have no C# code
in the backend. For that we'll use the Java wrappers for the Xamarin APIs as provided by Michael of
PlayN fame :) IOSApplication will become the real main entry point.
   
== How should the process for users look like? ==
Insead of another Eclipse project, we'll have a MonoTouch project. That will use an assembly generated
from the core project and symlink to the android project's assets folder. All it does it fire up
an IOSApplication, passing the ApplicationListener to it. We can add a custom build step in the Monotouch
project that compiles the core projects Java files and creates a new Mono assembly. That should just work :)
   
== Native code ==
I'm still working on this.

TODO:
- add libikvm-natives.a to mono project
- setup XCode project for gdx core natives, output libgdx.so for arm6/arm7/i386
- integrate core native build in ant file.
- add wrappers for OpenGL ES for iOS so we don't have to wrap OpenTK. We want to use ByteBuffers.